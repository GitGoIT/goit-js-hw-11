{"mappings":"AAGA,MAAMA,EAAaC,SAASC,cAAc,gBACpCC,EAAQF,SAASC,cAAc,6BAC/BE,EAAgBH,SAASC,cAAc,YAGvCG,EAAc,ICRL,MAQfC,QAAQC,GACJ,MAAMC,EAAO,GAKF,OAJXA,EAAKC,OAASR,SAASC,cAAcK,GACpBC,EAAZE,MAAQF,EAAKC,OAAOP,cAAc,UAC5BM,EAANG,QAAUH,EAAKC,OAAOP,cAAc,YAElCM,C,CAIXI,SACIC,KAAKL,KAAKC,OAAOK,UAAW,EACRD,KAAfL,KAAKE,MAAMK,YAAc,YACLF,KAApBL,KAAKG,QAAQK,UAAUC,IAAI,aACPJ,KAApBL,KAAKC,OAAOO,UAAUE,OAAO,Y,CAGtCC,UACIN,KAAKL,KAAKC,OAAOK,UAAW,EACND,KAAjBL,KAAKE,MAAMK,YAAc,aACLF,KAApBL,KAAKG,QAAQK,UAAUE,OAAO,aACZL,KAAlBL,KAAKC,OAAOO,UAAUC,IAAI,Y,CAGnCG,OACIP,KAAKL,KAAKC,OAAOO,UAAUE,OAAO,Y,CAGtCG,OACIR,KAAKL,KAAKC,OAAOO,UAAUC,IAAI,Y,CApC/BK,aAAYf,SAAEA,EAAQgB,OAAEA,GAAS,IAC7BV,KAAKL,KAAOK,KAAKP,QAAQC,GAEzBgB,GAAUV,KAAKQ,M,GDIa,CAChCd,SAAU,aACVgB,QAAQ,IAGNC,EAAiB,IEXW,MAO9BC,UAAUC,GACNC,QAAQC,IAAIf,MACZ,MAAMgB,EAAM,qEAA6ChB,KAAKa,oFAAoFb,KAAKiB,mBAE3J,OAAOC,MAAMF,GACmBG,MAAtBC,GAAYA,EAASC,SACCF,MAAtB,EAACG,KAAEA,MACLtB,KAAKuB,gBACED,I,CAInBC,gBACIvB,KAAKiB,MAAQ,C,CAGjBO,YACIxB,KAAKiB,KAAO,C,CAGZQ,YACA,OAAOzB,KAAKa,W,CAEZY,UAAMC,GACN1B,KAAKa,YAAca,C,CA7BnBjB,cACIT,KAAKa,YAAc,GACnBb,KAAKiB,KAAO,C,GFUsB9B,EAA/BwC,iBAAiB,UAK0C,SAApDC,GAGY,GAF1BA,EAAEC,iBAC8ClB,EAAjCc,MAAQnC,EAAMwC,MACA,KAAzBnB,EAAec,MACf,OAAOM,MAAM,8CAGjBvC,EAAYc,UACwCd,EAAxCe,OAC2CI,EAAxCa,YACgDV,QAAvDC,IAAIJ,EAAec,OAC3Bd,EAAeC,UAbD,IAc2BO,MAA/BG,IA0BV/B,EAAcyC,UAAY,GAxBsCC,EAAvCX,GAC0B9B,EAA/BO,QAAQ,G,IAnBZP,EAARG,KAAKC,OAAO+B,iBAAiB,SAuBzC,SAAoBC,GAChBpC,EAAYc,UACwCd,EAAxCe,OAC2CI,EAAxCC,UAxBD,IAyB2BO,MAA/BG,IACFW,EAAiBX,GAC0B9B,EAA/BO,QAAQ,G,IAQhC,SAASkC,EAAiBX,GACtB/B,EAAc2C,mBAAmB,YAOrC,SAAiBZ,GACb,MAAMa,EAASb,EAAKc,KAAIC,GACb,wEAC8BA,EAAIC,sBAAsBD,EAAIE,uIAG1CF,EAAIG,0GAGJH,EAAII,6GAGDJ,EAAIK,iHAGHL,EAAIM,gFAKpCC,KAAK,IAC4ErD,EAApEyC,UAAYG,C,CA5BoBU,CAAQvB,G","sources":["src/index.js","src/js-components/load-more-btn.js","src/js-components/news-service.js"],"sourcesContent":["import NewsApiService from './js-components/news-service' // імпортуємо окремо винесений метод роботи з методу роботи з API\nimport LoadMoreBtn from './js-components/load-more-btn' // імпортуємо окремо винесену функцію(клас) для приховування кнопки Load more\n\nconst searchForm = document.querySelector('#search-form');     // отримуємо доступ до форми\nconst input = document.querySelector('input[name=\"searchQuery\"]');     // отримуємо доступ до інпуту\nconst hitsContainer = document.querySelector('.gallery');  // отримуємо доступ до поля карток\n// const loadMoreBtn = document.querySelector('.load-more');  // отримуємо доступ до пкнопки дозавантаження\n\nconst loadMoreBtn = new LoadMoreBtn({  // створюємо новий екземпляр класу для обробки методу приховання/показування кнопки Load more, отримуємо доступ до кнопки через селектор в класі LoadMoreBtn\n    selector: '.load-more',  // встановлюэмо доступ до кнопки Load more\n    hidden: true,  // встановлюэмо за замовчуванням кнопку Load more захованою\n}); \n\nconst newsApiService = new NewsApiService(); // створюємо новий об'єкт для обробки методу роботи з API\n\n\nsearchForm.addEventListener('submit', onSearch)  // слухач для форми пошуку\nloadMoreBtn.refs.button.addEventListener('click', onLoadMore)  // слухач для кнопки дозавантаження\n\nlet searchQuery = ''; // оголошуємо глобальну змінну для можливості роботи з нею окремовинисеного методу fetchArticles\n\nfunction onSearch(e) {  // функція першої загрузки результатів пошуку\n    e.preventDefault();   // знімаємо перезавантаження сторінки при роботі з формою\n    newsApiService.query = input.value; // отримуємо в обєкт дані з інпуту\n    if (newsApiService.query === '') {  // виводимо повідомлення в разі сабміту пустого інпуту\n        return alert('Please enter a value to search for results');\n    }\n    \n    loadMoreBtn.disable(); // встановлюємо кнопку в режим Loading... (метод винесений в зовнішній файл)\n    loadMoreBtn.show(); // показуємо кнопку завантаження (метод винесений в зовнішній файл)\n    newsApiService.resetPage(); // додаємо на submit метод скдинання сторінки до 1-ї при новому пошуку (описуємо в класі NewsApiService)\n    console.log(newsApiService.query);\n    newsApiService.fetchHits(searchQuery) // викликаємо єдиний спільний метод роботи з API\n        .then(hits => {\n            clearHitsContainer(); // чистимо контейнер перед завантаженням даними наступного пошуку\n            appendHitsMarkup(hits); // посилаємо для мапінгу в дом значення об'єктів даних\n            loadMoreBtn.enable(); // встановлюємо кнопку в режим Load more (метод винесений в зовнішній файл)\n        });\n}\n\nfunction onLoadMore(e) { // функція наступних догрузок результатів пошуку\n    loadMoreBtn.disable(); // встановлюємо кнопку в режим Loading... (метод винесений в зовнішній файл)\n    loadMoreBtn.show(); // показуємо кнопку завантаження (метод винесений в зовнішній файл)\n    newsApiService.fetchHits(searchQuery)  // викликаємо єдиний спільний метод роботи з API\n        .then(hits => {\n            appendHitsMarkup(hits) // посилаємо для мапінгу в дом значення об'єктів даних\n            loadMoreBtn.enable(); // встановлюємо кнопку в режим Load more (метод винесений в зовнішній файл)\n        }); \n    \n    \n    // newsApiService.fetchHits(searchQuery)  // викликаємо єдиний спільний метод роботи з API\n    //     .then(appendHitsMarkup); // посилаємо для мапінгу в дом значення об'єктів даних\n}\n    \nfunction appendHitsMarkup(hits) { // функція загрузки в контейнер та мапінгу в дом значення об'єктів даних\n    hitsContainer.insertAdjacentHTML('beforeend', hitsTpl(hits)); \n}\n\nfunction clearHitsContainer() { // функція очистки контейнеру перед мапінгом в дом значень іншого пошуку\n    hitsContainer.innerHTML = '';\n}\n\nfunction hitsTpl(hits) { // функцію шаблону мапінгу результатів фетчу в дом\n    const markup = hits.map(hit => { // мапимо дані з API в заготовку html для картки\n        return `<div class=\"photo-card\">\n                <img class=\"img-card\" src=\"${hit.webformatURL}\" alt=\"${hit.tags}\" loading=\"lazy\"/>\n                <div class=\"info\">\n                  <p class=\"info-item\">\n                  <b>Likes</b> ${hit.likes}\n                  </p>\n                  <p class=\"info-item\">\n                  <b>Views</b> ${hit.views}\n                  </p>\n                  <p class=\"info-item\">\n                  <b>Comments</b> ${hit.comments}\n                  </p>\n                  <p class=\"info-item\">\n                  <b>Downloads</b> ${hit.downloads}\n                  </p>\n              </div>\n            </div>`;\n    })\n    .join(''); // об'єднуємо всі елементи масиву в строку та розділяємо 'пробілом' (прибираємо коми за замовчуванням)\n    hitsContainer.innerHTML = markup; // прописуємо новий html картки в домі\n}","export default class LoadMoreBtn {\n    constructor({ selector, hidden = false }) {\n        this.refs = this.getRefs(selector); // задаємо в this.refs посилання на змінні в кнопці\n\n        hidden && this.hide(); // виконуємо якщо на кнопці встановлено початкове правило hidden=true тоді ховаємо її методом hide(нижче)\n    }\n\n\ngetRefs(selector) {\n    const refs = {};\n    refs.button = document.querySelector(selector); // посилання на кнопку\n    refs.label = refs.button.querySelector('.label'); // посилання на label\n    refs.spinner = refs.button.querySelector('.spinner'); // посилання на spin\n\n    return refs;\n    }\n \n\nenable() { // стан кнопки на очікування кліку для завандаження даних (задаємо в парі з методами show/hide)\n    this.refs.button.disabled = false; // робимо кнопку активною\n    this.refs.label.textContent = 'Load more'; // підставляємо на кнопку слово Load more\n    this.refs.spinner.classList.add('is-hidden'); // деактивуємо спінер на кнопці\n    this.refs.button.classList.remove('is-hidden'); // прибираэмо hidden, робимо кнопку видимою\n}\n\ndisable() { // стан кнопки на імітацію завантаження даних (задаємо в парі з методами show/hide)\n    this.refs.button.disabled = true; // робимо кнопку неактивною\n    this.refs.label.textContent = 'Loading...'; // підставляємо на кнопку слово Loading...\n    this.refs.spinner.classList.remove('is-hidden'); // активуємо спінер на кнопці\n    this.refs.button.classList.add('is-hidden'); // ставимо hidden, робимо кнопку невидимою\n}\n\nshow() {  // метод показування кнопки Load more \n    this.refs.button.classList.remove('is-hidden'); // знімаємо hidden, робимо кнопку видимою\n}\n\nhide() { // метод приховування кнопки Load more \n    this.refs.button.classList.add('is-hidden'); // ставимо hidden, робимо кнопку невидимою\n    }\n}","const API_KEY = '32070440-da23fcdb10bb13069c595106c' // виносимо ключ в змінну\n\nexport default class NewsApiService { // створюємо окремий класс для роботи з АРІ\n\n    constructor() {\n        this.searchQuery = ''; // оголошуємо глобальну змінну в конструкторі для подальшого перезапису через метод get та set\n        this.page = 1; // вводимо параметер номера сторінки для можливості догрузки \n        \n    }\n    fetchHits(searchQuery) {  // формуємо єдиний метод який буде відповідати за HTTP запити\n        console.log(this);\n        const url = `https://pixabay.com/api/?key=${API_KEY}&q=${this.searchQuery}&image_type=photo&lang=en&orientation=horizontal&safesearch=true&page=${this.page}&per_page=40`\n    \n    return fetch(url)  //забираємо проміс даних по лінку API\n        .then(respense => respense.json()) //парсимо дані в текстовий формат json\n        .then(({ hits }) => {    \n            this.incrementPage(); // догружаємо сторінки з даними при кожному кліку на load more(метод описаний нижче)\n            return hits; // повертаємо у зовнішній код проміс значення об'єкту даних\n        })     \n    } \n\nincrementPage() { // прописуємо метод збільшення номеру сторінки до наступної при кліку на load more\n    this.page += 1;\n}\n\nresetPage() { // прописуємо метод скидання номеру сторінки до 1-ї при новому пошуку\n    this.page = 1;\n}\n\nget query() { //  прописуємо в конструктор медот для отримання змінної \n    return this.searchQuery;\n    }\nset query(newQuery) { //  прописуємо в конструктор медот для перезапису змінної \n    this.searchQuery = newQuery;    \n}\n}\n\n"],"names":["$1f0dc3b9307be026$var$searchForm","document","querySelector","$1f0dc3b9307be026$var$input","$1f0dc3b9307be026$var$hitsContainer","$1f0dc3b9307be026$var$loadMoreBtn","getRefs","selector","refs","button","label","spinner","enable","this","disabled","textContent","classList","add","remove","disable","show","hide","constructor","hidden","$1f0dc3b9307be026$var$newsApiService","fetchHits","searchQuery","console","log","url","page","fetch","then","respense","json","hits","incrementPage","resetPage","query","newQuery","addEventListener","e","preventDefault","value","alert","innerHTML","$1f0dc3b9307be026$var$appendHitsMarkup","insertAdjacentHTML","markup","map","hit","webformatURL","tags","likes","views","comments","downloads","join","$1f0dc3b9307be026$var$hitsTpl"],"version":3,"file":"index.8952dd48.js.map"}